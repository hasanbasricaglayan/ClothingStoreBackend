// <auto-generated />
using System;
using ClothingStoreBackend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClothingStoreBackend.Migrations
{
    [DbContext(typeof(ClothingStoreContext))]
    partial class ClothingStoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClothingStoreBackend.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Chemises"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "T-shirts"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Polos"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Sweats"
                        },
                        new
                        {
                            CategoryId = 5,
                            Name = "Pulls"
                        },
                        new
                        {
                            CategoryId = 6,
                            Name = "Gilets"
                        },
                        new
                        {
                            CategoryId = 7,
                            Name = "Vestes"
                        },
                        new
                        {
                            CategoryId = 8,
                            Name = "Blousons"
                        },
                        new
                        {
                            CategoryId = 9,
                            Name = "Manteaux"
                        },
                        new
                        {
                            CategoryId = 10,
                            Name = "Pantalons"
                        },
                        new
                        {
                            CategoryId = 11,
                            Name = "Jeans"
                        },
                        new
                        {
                            CategoryId = 12,
                            Name = "Costumes"
                        },
                        new
                        {
                            CategoryId = 13,
                            Name = "Chaussures"
                        },
                        new
                        {
                            CategoryId = 14,
                            Name = "Accessoires"
                        });
                });

            modelBuilder.Entity("ClothingStoreBackend.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            OrderDate = new DateOnly(2024, 7, 20),
                            Status = "Livrée",
                            UserId = 1
                        },
                        new
                        {
                            OrderId = 2,
                            OrderDate = new DateOnly(2024, 7, 20),
                            Status = "En attente",
                            UserId = 2
                        },
                        new
                        {
                            OrderId = 3,
                            OrderDate = new DateOnly(2024, 7, 20),
                            Status = "Validée",
                            UserId = 2
                        },
                        new
                        {
                            OrderId = 4,
                            OrderDate = new DateOnly(2024, 7, 20),
                            Status = "Expédiée",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("ClothingStoreBackend.Entities.OrderProduct", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            ProductId = 1,
                            Price = 10.99,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 1,
                            ProductId = 2,
                            Price = 20.989999999999998,
                            Quantity = 3
                        },
                        new
                        {
                            OrderId = 1,
                            ProductId = 3,
                            Price = 30.989999999999998,
                            Quantity = 1
                        },
                        new
                        {
                            OrderId = 2,
                            ProductId = 4,
                            Price = 4.9900000000000002,
                            Quantity = 1
                        },
                        new
                        {
                            OrderId = 2,
                            ProductId = 5,
                            Price = 5.9900000000000002,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 3,
                            ProductId = 6,
                            Price = 6.9900000000000002,
                            Quantity = 1
                        },
                        new
                        {
                            OrderId = 4,
                            ProductId = 7,
                            Price = 7.9900000000000002,
                            Quantity = 4
                        });
                });

            modelBuilder.Entity("ClothingStoreBackend.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Brand = "Marque 1",
                            CategoryId = 1,
                            Color = "Couleur 1",
                            Description = "Description 1",
                            ImageURL = "https://placehold.co/300x400",
                            Name = "Produit 1",
                            Price = 1.0,
                            QuantityInStock = 100,
                            Size = "Taille 1"
                        },
                        new
                        {
                            ProductId = 2,
                            Brand = "Marque 2",
                            CategoryId = 1,
                            Color = "Couleur 2",
                            Description = "Description 2",
                            ImageURL = "https://placehold.co/300x400",
                            Name = "Produit 2",
                            Price = 2.0,
                            QuantityInStock = 200,
                            Size = "Taille 2"
                        },
                        new
                        {
                            ProductId = 3,
                            Brand = "Marque 3",
                            CategoryId = 2,
                            Color = "Couleur 3",
                            Description = "Description 3",
                            ImageURL = "https://placehold.co/300x400",
                            Name = "Produit 3",
                            Price = 3.0,
                            QuantityInStock = 300,
                            Size = "Taille 3"
                        },
                        new
                        {
                            ProductId = 4,
                            Brand = "Marque 4",
                            CategoryId = 2,
                            Color = "Couleur 4",
                            Description = "Description 4",
                            ImageURL = "https://placehold.co/300x400",
                            Name = "Produit 4",
                            Price = 4.0,
                            QuantityInStock = 400,
                            Size = "Taille 4"
                        },
                        new
                        {
                            ProductId = 5,
                            Brand = "Marque 5",
                            CategoryId = 3,
                            Color = "Couleur 5",
                            Description = "Description 5",
                            ImageURL = "https://placehold.co/300x400",
                            Name = "Produit 5",
                            Price = 5.0,
                            QuantityInStock = 500,
                            Size = "Taille 5"
                        },
                        new
                        {
                            ProductId = 6,
                            Brand = "Marque 6",
                            CategoryId = 3,
                            Color = "Couleur 6",
                            Description = "Description 6",
                            ImageURL = "https://placehold.co/300x400",
                            Name = "Produit 6",
                            Price = 6.0,
                            QuantityInStock = 600,
                            Size = "Taille 6"
                        },
                        new
                        {
                            ProductId = 7,
                            Brand = "Marque 7",
                            CategoryId = 4,
                            Color = "Couleur 7",
                            Description = "Description 7",
                            ImageURL = "https://placehold.co/300x400",
                            Name = "Produit 7",
                            Price = 7.0,
                            QuantityInStock = 700,
                            Size = "Taille 7"
                        },
                        new
                        {
                            ProductId = 8,
                            Brand = "Marque 8",
                            CategoryId = 4,
                            Color = "Couleur 8",
                            Description = "Description 8",
                            ImageURL = "https://placehold.co/300x400",
                            Name = "Produit 8",
                            Price = 8.0,
                            QuantityInStock = 800,
                            Size = "Taille 8"
                        },
                        new
                        {
                            ProductId = 9,
                            Brand = "Marque 9",
                            CategoryId = 5,
                            Color = "Couleur 9",
                            Description = "Description 9",
                            ImageURL = "https://placehold.co/300x400",
                            Name = "Produit 9",
                            Price = 9.0,
                            QuantityInStock = 900,
                            Size = "Taille 9"
                        },
                        new
                        {
                            ProductId = 10,
                            Brand = "Marque 10",
                            CategoryId = 5,
                            Color = "Couleur 10",
                            Description = "Description 10",
                            ImageURL = "https://placehold.co/300x400",
                            Name = "Produit 10",
                            Price = 10.0,
                            QuantityInStock = 1000,
                            Size = "Taille 10"
                        });
                });

            modelBuilder.Entity("ClothingStoreBackend.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("BillingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            BillingAddress = "Adresse de facturation 1",
                            DateOfBirth = new DateOnly(2024, 7, 20),
                            DeliveryAddress = "Adresse de livraison 1",
                            Email = "email_1@mail.com",
                            FirstName = "Prénom 1",
                            IsAdmin = true,
                            LastName = "Nom 1",
                            Password = "Password_1",
                            PhoneNumber = "+331"
                        },
                        new
                        {
                            UserId = 2,
                            BillingAddress = "Adresse de facturation 2",
                            DateOfBirth = new DateOnly(2024, 7, 20),
                            DeliveryAddress = "Adresse de livraison 2",
                            Email = "email_2@mail.com",
                            FirstName = "Prénom 2",
                            IsAdmin = true,
                            LastName = "Nom 2",
                            Password = "Password_2",
                            PhoneNumber = "+332"
                        },
                        new
                        {
                            UserId = 3,
                            BillingAddress = "Adresse de facturation 3",
                            DateOfBirth = new DateOnly(2024, 7, 20),
                            DeliveryAddress = "Adresse de livraison 3",
                            Email = "email_3@mail.com",
                            FirstName = "Prénom 3",
                            IsAdmin = false,
                            LastName = "Nom 3",
                            Password = "Password_3",
                            PhoneNumber = "+333"
                        },
                        new
                        {
                            UserId = 4,
                            BillingAddress = "Adresse de facturation 4",
                            DateOfBirth = new DateOnly(2024, 7, 20),
                            DeliveryAddress = "Adresse de livraison 4",
                            Email = "email_4@mail.com",
                            FirstName = "Prénom 4",
                            IsAdmin = false,
                            LastName = "Nom 4",
                            Password = "Password_4",
                            PhoneNumber = "+334"
                        });
                });

            modelBuilder.Entity("ClothingStoreBackend.Entities.Order", b =>
                {
                    b.HasOne("ClothingStoreBackend.Entities.User", null)
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClothingStoreBackend.Entities.OrderProduct", b =>
                {
                    b.HasOne("ClothingStoreBackend.Entities.Order", "Order")
                        .WithMany("Products")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClothingStoreBackend.Entities.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ClothingStoreBackend.Entities.Product", b =>
                {
                    b.HasOne("ClothingStoreBackend.Entities.Category", null)
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClothingStoreBackend.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ClothingStoreBackend.Entities.Order", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ClothingStoreBackend.Entities.Product", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ClothingStoreBackend.Entities.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
